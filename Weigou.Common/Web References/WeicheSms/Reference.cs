//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18063
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 4.0.30319.18063 版自动生成。
// 
#pragma warning disable 1591

namespace Weigou.Common.WeicheSms {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    // CODEGEN: 未处理命名空间“http://www.w3.org/2000/wsdl/suds”中的可选 WSDL 扩展元素“method”。
    // CODEGEN: 未处理命名空间“http://www.w3.org/2000/wsdl/suds”中的可选 WSDL 扩展元素“method”。
    // CODEGEN: 未处理命名空间“http://www.w3.org/2000/wsdl/suds”中的可选 WSDL 扩展元素“method”。
    // CODEGEN: 未处理命名空间“http://www.w3.org/2000/wsdl/suds”中的可选 WSDL 扩展元素“method”。
    // CODEGEN: 未处理命名空间“http://www.w3.org/2000/wsdl/suds”中的可选 WSDL 扩展元素“method”。
    // CODEGEN: 未处理命名空间“http://www.w3.org/2000/wsdl/suds”中的可选 WSDL 扩展元素“method”。
    // CODEGEN: 未处理命名空间“http://www.w3.org/2000/wsdl/suds”中的可选 WSDL 扩展元素“class”。
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="Soap57ProviderBinding", Namespace="http://schemas.microsoft.com/clr/nsassem/com.softwee.smgw.soaps/soaps")]
    public partial class Soap57ProviderService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback SubmitOperationCompleted;
        
        private System.Threading.SendOrPostCallback QueryReportOperationCompleted;
        
        private System.Threading.SendOrPostCallback InitializeLifetimeServiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback RetrieveAllOperationCompleted;
        
        private System.Threading.SendOrPostCallback BatchSubmitOperationCompleted;
        
        private System.Threading.SendOrPostCallback QueryMoOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Soap57ProviderService() {
            this.Url = global::Weigou.Common.Properties.Settings.Default.Weiche_Common_WeicheSms_Soap57ProviderService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event SubmitCompletedEventHandler SubmitCompleted;
        
        /// <remarks/>
        public event QueryReportCompletedEventHandler QueryReportCompleted;
        
        /// <remarks/>
        public event InitializeLifetimeServiceCompletedEventHandler InitializeLifetimeServiceCompleted;
        
        /// <remarks/>
        public event RetrieveAllCompletedEventHandler RetrieveAllCompleted;
        
        /// <remarks/>
        public event BatchSubmitCompletedEventHandler BatchSubmitCompleted;
        
        /// <remarks/>
        public event QueryMoCompletedEventHandler QueryMoCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.microsoft.com/clr/nsassem/com.softwee.smgw.soaps.Soap57Provider/so" +
            "aps#Submit", RequestNamespace="http://schemas.microsoft.com/clr/nsassem/com.softwee.smgw.soaps.Soap57Provider/so" +
            "aps", ResponseNamespace="http://schemas.microsoft.com/clr/nsassem/com.softwee.smgw.soaps.Soap57Provider/so" +
            "aps")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string Submit(string spID, string password, string accessCode, string content, string mobileString) {
            object[] results = this.Invoke("Submit", new object[] {
                        spID,
                        password,
                        accessCode,
                        content,
                        mobileString});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SubmitAsync(string spID, string password, string accessCode, string content, string mobileString) {
            this.SubmitAsync(spID, password, accessCode, content, mobileString, null);
        }
        
        /// <remarks/>
        public void SubmitAsync(string spID, string password, string accessCode, string content, string mobileString, object userState) {
            if ((this.SubmitOperationCompleted == null)) {
                this.SubmitOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSubmitOperationCompleted);
            }
            this.InvokeAsync("Submit", new object[] {
                        spID,
                        password,
                        accessCode,
                        content,
                        mobileString}, this.SubmitOperationCompleted, userState);
        }
        
        private void OnSubmitOperationCompleted(object arg) {
            if ((this.SubmitCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SubmitCompleted(this, new SubmitCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.microsoft.com/clr/nsassem/com.softwee.smgw.soaps.Soap57Provider/so" +
            "aps#QueryReport", RequestNamespace="http://schemas.microsoft.com/clr/nsassem/com.softwee.smgw.soaps.Soap57Provider/so" +
            "aps", ResponseNamespace="http://schemas.microsoft.com/clr/nsassem/com.softwee.smgw.soaps.Soap57Provider/so" +
            "aps")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string QueryReport(string spID, string password) {
            object[] results = this.Invoke("QueryReport", new object[] {
                        spID,
                        password});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void QueryReportAsync(string spID, string password) {
            this.QueryReportAsync(spID, password, null);
        }
        
        /// <remarks/>
        public void QueryReportAsync(string spID, string password, object userState) {
            if ((this.QueryReportOperationCompleted == null)) {
                this.QueryReportOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryReportOperationCompleted);
            }
            this.InvokeAsync("QueryReport", new object[] {
                        spID,
                        password}, this.QueryReportOperationCompleted, userState);
        }
        
        private void OnQueryReportOperationCompleted(object arg) {
            if ((this.QueryReportCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryReportCompleted(this, new QueryReportCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.microsoft.com/clr/nsassem/com.softwee.smgw.soaps.Soap57Provider/so" +
            "aps#InitializeLifetimeService", RequestNamespace="http://schemas.microsoft.com/clr/nsassem/com.softwee.smgw.soaps.Soap57Provider/so" +
            "aps", ResponseNamespace="http://schemas.microsoft.com/clr/nsassem/com.softwee.smgw.soaps.Soap57Provider/so" +
            "aps")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public object InitializeLifetimeService() {
            object[] results = this.Invoke("InitializeLifetimeService", new object[0]);
            return ((object)(results[0]));
        }
        
        /// <remarks/>
        public void InitializeLifetimeServiceAsync() {
            this.InitializeLifetimeServiceAsync(null);
        }
        
        /// <remarks/>
        public void InitializeLifetimeServiceAsync(object userState) {
            if ((this.InitializeLifetimeServiceOperationCompleted == null)) {
                this.InitializeLifetimeServiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInitializeLifetimeServiceOperationCompleted);
            }
            this.InvokeAsync("InitializeLifetimeService", new object[0], this.InitializeLifetimeServiceOperationCompleted, userState);
        }
        
        private void OnInitializeLifetimeServiceOperationCompleted(object arg) {
            if ((this.InitializeLifetimeServiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InitializeLifetimeServiceCompleted(this, new InitializeLifetimeServiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.microsoft.com/clr/nsassem/com.softwee.smgw.soaps.Soap57Provider/so" +
            "aps#RetrieveAll", RequestNamespace="http://schemas.microsoft.com/clr/nsassem/com.softwee.smgw.soaps.Soap57Provider/so" +
            "aps", ResponseNamespace="http://schemas.microsoft.com/clr/nsassem/com.softwee.smgw.soaps.Soap57Provider/so" +
            "aps")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string RetrieveAll(string spID, string password) {
            object[] results = this.Invoke("RetrieveAll", new object[] {
                        spID,
                        password});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RetrieveAllAsync(string spID, string password) {
            this.RetrieveAllAsync(spID, password, null);
        }
        
        /// <remarks/>
        public void RetrieveAllAsync(string spID, string password, object userState) {
            if ((this.RetrieveAllOperationCompleted == null)) {
                this.RetrieveAllOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRetrieveAllOperationCompleted);
            }
            this.InvokeAsync("RetrieveAll", new object[] {
                        spID,
                        password}, this.RetrieveAllOperationCompleted, userState);
        }
        
        private void OnRetrieveAllOperationCompleted(object arg) {
            if ((this.RetrieveAllCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RetrieveAllCompleted(this, new RetrieveAllCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.microsoft.com/clr/nsassem/com.softwee.smgw.soaps.Soap57Provider/so" +
            "aps#BatchSubmit", RequestNamespace="http://schemas.microsoft.com/clr/nsassem/com.softwee.smgw.soaps.Soap57Provider/so" +
            "aps", ResponseNamespace="http://schemas.microsoft.com/clr/nsassem/com.softwee.smgw.soaps.Soap57Provider/so" +
            "aps")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string BatchSubmit(string spID, string password, string accessCode, string[] mobileContentArray) {
            object[] results = this.Invoke("BatchSubmit", new object[] {
                        spID,
                        password,
                        accessCode,
                        mobileContentArray});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BatchSubmitAsync(string spID, string password, string accessCode, string[] mobileContentArray) {
            this.BatchSubmitAsync(spID, password, accessCode, mobileContentArray, null);
        }
        
        /// <remarks/>
        public void BatchSubmitAsync(string spID, string password, string accessCode, string[] mobileContentArray, object userState) {
            if ((this.BatchSubmitOperationCompleted == null)) {
                this.BatchSubmitOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBatchSubmitOperationCompleted);
            }
            this.InvokeAsync("BatchSubmit", new object[] {
                        spID,
                        password,
                        accessCode,
                        mobileContentArray}, this.BatchSubmitOperationCompleted, userState);
        }
        
        private void OnBatchSubmitOperationCompleted(object arg) {
            if ((this.BatchSubmitCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BatchSubmitCompleted(this, new BatchSubmitCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("http://schemas.microsoft.com/clr/nsassem/com.softwee.smgw.soaps.Soap57Provider/so" +
            "aps#QueryMo", RequestNamespace="http://schemas.microsoft.com/clr/nsassem/com.softwee.smgw.soaps.Soap57Provider/so" +
            "aps", ResponseNamespace="http://schemas.microsoft.com/clr/nsassem/com.softwee.smgw.soaps.Soap57Provider/so" +
            "aps")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string QueryMo(string spID, string password) {
            object[] results = this.Invoke("QueryMo", new object[] {
                        spID,
                        password});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void QueryMoAsync(string spID, string password) {
            this.QueryMoAsync(spID, password, null);
        }
        
        /// <remarks/>
        public void QueryMoAsync(string spID, string password, object userState) {
            if ((this.QueryMoOperationCompleted == null)) {
                this.QueryMoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryMoOperationCompleted);
            }
            this.InvokeAsync("QueryMo", new object[] {
                        spID,
                        password}, this.QueryMoOperationCompleted, userState);
        }
        
        private void OnQueryMoOperationCompleted(object arg) {
            if ((this.QueryMoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryMoCompleted(this, new QueryMoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void SubmitCompletedEventHandler(object sender, SubmitCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SubmitCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SubmitCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void QueryReportCompletedEventHandler(object sender, QueryReportCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QueryReportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QueryReportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void InitializeLifetimeServiceCompletedEventHandler(object sender, InitializeLifetimeServiceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InitializeLifetimeServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InitializeLifetimeServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public object Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void RetrieveAllCompletedEventHandler(object sender, RetrieveAllCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RetrieveAllCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RetrieveAllCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void BatchSubmitCompletedEventHandler(object sender, BatchSubmitCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BatchSubmitCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BatchSubmitCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    public delegate void QueryMoCompletedEventHandler(object sender, QueryMoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17929")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QueryMoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QueryMoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591